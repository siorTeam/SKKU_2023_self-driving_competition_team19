//최적화 버전
#include <PID_v1.h>

// Pin
const int potentiometerPin = A8;  // 가변저항 연결 핀
const int motor_f_1 = 2;
const int motor_f_2 = 3;
int motor_b_l_1 = 4; 
int motor_b_l_2 = 5; 
int motor_b_r_1 = 7; 
int motor_b_r_2 = 6; 
const int NUM_SENSORS = 6;
const int echoPins[NUM_SENSORS] = {A0, A1, A2, A3, A4, A5};
const int trigPins[NUM_SENSORS] = {23, 25, 27, 29, 31, 33};
bool hypersonic_detected[NUM_SENSORS] = {false, false, false, false, false, false};

// ##### 기본 주행
//속도 
int Deceleration_threshold = 20;
int speed;
int speed_offset = 255;


// PID
// 앞바퀴
double setpoint;  // 목표값(튜닝 완료)
double pid_input, pid_output;     // PID 제어에 사용할 변수
const double consKp = 4.0;  // 보수적인 제어에 사용할 하이퍼 파라미터닝
const double consKi = 0.011;
const double consKd = 0.125;
const double aggKp = 10;  // 공격적인 제어에 사용할 하이퍼 파라미터
const double aggKi = 0.0075;
const double aggKd = 0.6;
const double A_chng_max = 25; // (튜닝 필요)
const double W_chng_max = 40; // (튜닝 필요)
const double chng_max = 25;

// 폭에 의한 제어값 변화량 (튜닝 필요)
double W_setpoint = 520;  // 이상적인 차폭(offset)
double W_pid_input, W_chng_output;     // 차선과의 폭 PID 제어에 사용할 변수
const double W_consKp = 1.4;  // 공격적인 제어에 사용할 하이퍼 파라미터: 가까이 있을 때
const double W_consKi = 0.01;
const double W_consKd = 0.1;

// 폭에 의한 제어값 변화량 (튜닝 필요)
double A_setpoint = 59;  // 이상적인 차폭 (offset) arctan (1.43)
double A_pid_input, A_chng_output;     // 차선과의 폭 PID 제어에 사용할 변수
const double A_consKp = 1.5;  // 공격적인 제어에 사용할 하이퍼 파라미터: 가까이 있을 때
const double A_consKi = 0.01;
const double A_consKd = 0.1;

double CarLine_W, CarLine_A;
double chng_sum;
const double N_setpoint = 570;

PID pid(&pid_input, &pid_output, &setpoint, consKp, consKi, consKd, DIRECT);  // PID 객체 생성
PID W_pid(&W_pid_input, &W_chng_output, &W_setpoint, W_consKp, W_consKi, W_consKd, DIRECT);  // 차선과 폭 제어 PID 객체 생성
PID A_pid(&A_pid_input, &A_chng_output, &A_setpoint, A_consKp, A_consKi, A_consKd, DIRECT);  // 차선과 각도 PID 객체 생성

// ##### 회피기동
// 초음파 센서 감지 거리 설정 (단위: cm) 튜닝 필요
const int detectionDistance = 100;
const int rightDetectionDistance = 50;
bool avoidance_mode = false; //False면 좌 True 우회전

// 장애물 감지 함수 (74ms 소요)
bool detectObstacle(int triggerPin, int echoPin, int detectionDistance) {
  long duration;
  int distance;

  // 초음파를 발사하여 장애물까지의 거리 측정
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2;

  // 감지된 거리가 설정한 거리보다 짧으면 true 반환
  if (distance < detectionDistance) {
    return true;
  } else {
    return false;
  }
}

void setup() {
  // ##### 주행 코드
  // 모터 설정
  pinMode(motor_f_1, OUTPUT);
  pinMode(motor_f_2, OUTPUT);
  pinMode(motor_b_l_1, OUTPUT); 
  pinMode(motor_b_l_2, OUTPUT); 
  pinMode(motor_b_r_1, OUTPUT); 
  pinMode(motor_b_r_2, OUTPUT); 
  Serial.begin(9600);

  // PID 제어 설정
  pid.SetMode(AUTOMATIC);
  pid.SetOutputLimits(-255, 255);  // 출력 제한 설정
  W_pid.SetMode(AUTOMATIC);
  W_pid.SetOutputLimits(-W_chng_max, W_chng_max);  // 출력 제한 설정
  A_pid.SetMode(AUTOMATIC);
  A_pid.SetOutputLimits(-A_chng_max, A_chng_max);  // 출력 제한 설정

  // ##### 회피기동
  // 초음파 설정
  for (int i = 0; i < NUM_SENSORS; i++) {
    pinMode(trigPins[i], OUTPUT);
    pinMode(echoPins[i], INPUT);
  }
}


void loop() {
  if (Serial.available()) {
    // #### 파이시리얼로 주행 정보 받음
    String receivedString = Serial.readStringUntil('\n');
    int commaIndex = receivedString.indexOf(',');
    String line_angle_input_str = receivedString.substring(0, commaIndex);
    String width_input_str = receivedString.substring(commaIndex + 1);

    CarLine_A = line_angle_input_str.toFloat();
    CarLine_W = width_input_str.toFloat();

    //##### 회피기동에 의한 PID 제어
    for (int i = 0; i < NUM_SENSORS; i++) {
    hypersonic_detected[i]  = detectObstacle(trigPins[i], echoPins[i], detectionDistance);
    }
    // 오른쪽 장애물 있으면 모드 변환
    if (hypersonic_detected[6] and (not avoidance_mode)){
      avoidance_mode = true;
    }
    // 앞에 장애물이 있는 경우
    if (hypersonic_detected[1] or hypersonic_detected[2]){
      if(avoidance_mode){ //True 모드는 우회전
        setpoint = N_setpoint - chng_max;
      }
      else{ //False 모드는 좌회전
        setpoint = N_setpoint + chng_max;
      }
    }
    else{ // ##### 앞에 장애물 없으면 기본 주행 (카메라로 제어값 제어)
      // #### 폭 차에 의한 PID 제어
      W_pid_input = CarLine_W;
      W_pid.SetTunings(W_consKp, W_consKi, W_consKd);
      W_pid.Compute();

      // #### 각도 차에 의한 PID 제어
      A_pid_input = CarLine_A;
      A_pid.SetTunings(A_consKp, A_consKi, A_consKd);
      A_pid.Compute();
      //제어 인풋 없을 경우 직진
      if (not W_pid_input and not A_pid_input){ 
        setpoint = N_setpoint;
      }
      // C 구간 극복 (값이 이상하게 받아질 경우 직진)
      else if (W_pid_input >= 3000){
        setpoint = N_setpoint;
      }
      // 카메라로 제어값 제어
      else{
        chng_sum = W_chng_output + A_chng_output;
        chng_sum = constrain(chng_sum, -chng_max, chng_max);
        pid_input = analogRead(potentiometerPin);
        setpoint = N_setpoint + chng_sum;
      }
    }

    // #### 핸들 PID 제어
    double gap = abs(setpoint - pid_input);
    if (gap > 8) {
      pid.SetTunings(consKp, consKi, consKd);
    } else {
      pid.SetTunings(aggKp, aggKi, aggKd);
    }
    pid.Compute();

    // 앞바퀴 DC 모터 회전 제어
    if (pid_output > 0) {
      analogWrite(motor_f_1, pid_output);
      analogWrite(motor_f_2, 0);
    } else if (pid_output < 0) {
      analogWrite(motor_f_1, 0);
      analogWrite(motor_f_2, -pid_output);
    } else {
      analogWrite(motor_f_1, 0);
      analogWrite(motor_f_2, 0);
    }
    if (pid_output > 0) {
      analogWrite(motor_f_1, pid_output);
      analogWrite(motor_f_2, 0);
    } else if (pid_output < 0) {
      analogWrite(motor_f_1, 0);
      analogWrite(motor_f_2, -pid_output);
    } else {
      analogWrite(motor_f_1, 0);
      analogWrite(motor_f_2, 0);
    }
    //급회전시 감속
    if (abs(pid_output) >= 20){
      speed = speed_offset/4;
    } else {
      speed = speed_offset/3;
    }

    // 뒷바퀴
    analogWrite(motor_b_l_1, speed); 
    analogWrite(motor_b_l_2, 0);
    analogWrite(motor_b_r_1, speed); 
    analogWrite(motor_b_r_2, 0);

    //##### 디버깅 정보 출력 #####//
    // 체인지 값을  빼니까 -면 좌회전
    Serial.println("potentiometerValue: " + String(pid_input));
    //Serial.println("A_pid_input: " + String(A_pid_input));
    //Serial.println("A_chng_output: " + String(A_chng_output));
    //Serial.println("W_pid_input: " + String(W_pid_input));
    //Serial.println("W_chng_output: " + String(W_chng_output));
    // Serial.println("chng_sum: " + String(chng_sum));
    // Serial.println("setpoint: " + String(setpoint));
    // Serial.println("pid_output: " + String(pid_output));
    Serial.println("hypersonic_detected[1]: " + String(hypersonic_detected[1]));
    Serial.println("hypersonic_detected[2]: " + String(hypersonic_detected[2]));
    Serial.println("hypersonic_detected[6]: " + String(hypersonic_detected[6]));
    Serial.println();
  
    //delay(50);  // 딜레이
    //##### 디버깅 정보 출력 #####//
  }
}
